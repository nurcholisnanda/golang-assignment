// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock/repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/nurcholisnanda/golang-assignment/internal/dto"
	model "github.com/nurcholisnanda/golang-assignment/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepoInterface is a mock of RepoInterface interface.
type MockRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepoInterfaceMockRecorder
}

// MockRepoInterfaceMockRecorder is the mock recorder for MockRepoInterface.
type MockRepoInterfaceMockRecorder struct {
	mock *MockRepoInterface
}

// NewMockRepoInterface creates a new mock instance.
func NewMockRepoInterface(ctrl *gomock.Controller) *MockRepoInterface {
	mock := &MockRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoInterface) EXPECT() *MockRepoInterfaceMockRecorder {
	return m.recorder
}

// GetRecords mocks base method.
func (m *MockRepoInterface) GetRecords(req *dto.FetchRecordsRequest) ([]model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords", req)
	ret0, _ := ret[0].([]model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecords indicates an expected call of GetRecords.
func (mr *MockRepoInterfaceMockRecorder) GetRecords(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockRepoInterface)(nil).GetRecords), req)
}
